# Generated by Django 3.0.5 on 2022-01-03 21:04

import account.models
from django.db import migrations, models
import django.db.models.deletion
import sequence.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default=account.models.generate_code, max_length=100, unique=True, verbose_name='Code')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ecrire la question que vous souhaitez poser à votre audience')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Date de création')),
                ('imagefile', models.ImageField(blank=True, default='', null=True, upload_to=sequence.models.question_directory_path, verbose_name='Image')),
                ('is_score', models.BooleanField(default=0, verbose_name='Score ?')),
                ('score', models.PositiveIntegerField(blank=True, default=1000, null=True)),
                ('atype', models.PositiveIntegerField(default=0)),
                ('is_share', models.BooleanField(default=0, verbose_name='Mutualisé ?')),
                ('is_timer', models.BooleanField(default=0, verbose_name='Compte à rebours ?')),
                ('timer', models.BooleanField(default=0, verbose_name='Temps')),
                ('is_publish', models.BooleanField(default=0, verbose_name='Publié ?')),
                ('start_publish', models.DateTimeField(blank=True, null=True, verbose_name='A partir de')),
                ('stop_publish', models.DateTimeField(blank=True, null=True, verbose_name='Date de verrouillage')),
                ('liker', models.BooleanField(default=0, verbose_name='Like')),
                ('multiple', models.BooleanField(default=0, verbose_name='Réponse multiple')),
                ('ranking', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('is_shuffle', models.BooleanField(default=0, verbose_name='Shuffle ?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Titre')),
                ('ranking', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('organisateur', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, related_name='folders', to='account.Organisateur')),
            ],
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default=account.models.generate_code, max_length=100, unique=True, verbose_name='Code')),
                ('title', models.CharField(blank=True, default='Ma nouvelle séquence', max_length=255, null=True, verbose_name='Titre')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Date de création')),
                ('ranking', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('temporisation', models.BooleanField(default=0, verbose_name='mode continu ?')),
                ('authentification', models.BooleanField(default=0, verbose_name='Authentification ?')),
                ('pseudonyme', models.BooleanField(default=0, verbose_name='Pseudonyme ?')),
                ('competition', models.BooleanField(default=0, verbose_name='Compétition ?')),
                ('terminal', models.BooleanField(default=0, verbose_name='Affichage des diapositives sur le terminal des participants ?')),
                ('displayresult', models.BooleanField(default=0, verbose_name='Résultats visibles par défaut ?')),
                ('is_active', models.BooleanField(default=0, editable=False, verbose_name='En cours ?')),
                ('folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sequences', to='sequence.Folder')),
                ('organisateur', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, related_name='sequences', to='account.Organisateur')),
                ('participants', models.ManyToManyField(blank=True, related_name='sequences', to='account.Participant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Play',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_channel', models.CharField(help_text="channel de l'organisateur", max_length=60, null=True)),
                ('status', models.SmallIntegerField(default=0)),
                ('date_start', models.DateTimeField(blank=True)),
                ('date_end', models.DateTimeField(blank=True)),
                ('ranking', models.IntegerField(default=-1, help_text='la numero de la dernière activité terminée')),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sequence.Sequence')),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imageanswer', models.ImageField(blank=True, default='', null=True, upload_to=sequence.models.choice_directory_path, verbose_name='Image')),
                ('label', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Réponse')),
                ('is_correct', models.BooleanField(default=0, verbose_name='Réponse correcte ?')),
                ('associate', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Association')),
                ('imageassociate', models.ImageField(blank=True, default='', null=True, upload_to=sequence.models.choice_directory_path, verbose_name='Image')),
                ('textarea', models.TextField(blank=True, default='', null=True, verbose_name='Texte')),
                ('activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='sequence.Activity')),
            ],
        ),
        migrations.CreateModel(
            name='Answerplayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Réponse')),
                ('score', models.IntegerField(default=0, editable=False)),
                ('duration', models.CharField(default=0, editable=False, max_length=255, verbose_name='durée')),
                ('is_correct', models.BooleanField(default=0, editable=False)),
                ('activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers_player', to='sequence.Activity')),
                ('choice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers_player', to='sequence.Choice')),
                ('participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers_player', to='account.Participant')),
                ('play', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers_player', to='sequence.Play')),
            ],
        ),
        migrations.AddField(
            model_name='activity',
            name='sequence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='sequence.Sequence'),
        ),
    ]
